cmake_minimum_required(VERSION 3.13)

set(TARGET_NAME gemm_oc)
set(TARGET_HOST_PART ${TARGET_NAME}.host.elf)
set(TARGET_DEVICE ${TARGET_NAME}.device.elf)
set(TARGET_HOST ${TARGET_NAME}.elf)

# Host Partial Executable
add_executable(${TARGET_HOST_PART}
        host/offload.c
)

target_compile_definitions(${TARGET_HOST_PART} PUBLIC OCCAMY)

target_include_directories(${TARGET_HOST_PART} PUBLIC ${COMMON_INCLUDE_DIRS} ${PLATFORM_OCCAMY_INCLUDE_DIRS}#[[ ${SNRT_INCLUDE_DIRS}]] ${OCRT_HOST_INCLUDE_DIRS})
target_sources(${TARGET_HOST_PART} PUBLIC ${COMMON_SOURCES} ${PLATFORM_OCCAMY_SOURCES} #[[${SNRT_SOURCES}]] ${OCRT_HOST_SOURCES})
target_compile_options(${TARGET_HOST_PART} PUBLIC ${OCCAMY_DEVICE_COMPILE_OPTIONS}) # TODO: FIX HOST COMPILE OPTIONS

target_link_options(${TARGET_HOST_PART} PUBLIC ${OCCAMY_HOST_LINK_OPTIONS} -T${OCRT_HOST_LINKER_SCRIPT} -Wl,-Map=${CMAKE_CURRENT_BINARY_DIR}/${TARGET_HOST_PART}.map)
set_target_properties(${TARGET_HOST_PART} PROPERTIES LINK_DEPENDS ${OCRT_HOST_LINKER_SCRIPT})

add_custom_command(TARGET ${TARGET_HOST_PART} POST_BUILD
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        BYPRODUCTS ${CMAKE_CURRENT_BINARY_DIR}/${TARGET_HOST_PART}.d
        COMMAND ${CMAKE_OBJDUMP} ARGS -D -d ${TARGET_HOST_PART} > ${TARGET_HOST_PART}.d
        COMMENT "Generating objdump ${TARGET_HOST_PART}.d"
)

add_custom_command(TARGET ${TARGET_HOST_PART} POST_BUILD
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        BYPRODUCTS ${CMAKE_CURRENT_BINARY_DIR}/origin.ld
        COMMAND ${PLATFORM_OCCAMY_EXTRACT_ORIGIN_SH} ARGS ${CMAKE_OBJDUMP} ${TARGET_HOST_PART} origin.ld
        COMMENT "Extracting origin.ld"
)


# Device Executable
add_executable(${TARGET_DEVICE}
        device/main.c
        device/data.h
#        ${CMAKE_CURRENT_BINARY_DIR}/origin.ld
)
add_dependencies(${TARGET_DEVICE} ${TARGET_HOST_PART})
target_compile_definitions(${TARGET_DEVICE} PUBLIC OCCAMY)

target_include_directories(${TARGET_DEVICE} PUBLIC ${COMMON_INCLUDE_DIRS} ${PLATFORM_OCCAMY_INCLUDE_DIRS} ${SNRT_INCLUDE_DIRS} ${OCRT_DEVICE_INCLUDE_DIRS})
target_sources(${TARGET_DEVICE} PUBLIC ${COMMON_SOURCES} ${PLATFORM_OCCAMY_INCLUDE_DIRS} ${SNRT_SOURCES} ${OCRT_DEVICE_SOURCES})
target_compile_options(${TARGET_DEVICE} PUBLIC ${OCCAMY_DEVICE_COMPILE_OPTIONS})

target_link_directories(${TARGET_DEVICE} PUBLIC ${OCRT_LINK_INCLUDE_DIRS})
target_link_options(${TARGET_DEVICE} PUBLIC ${OCCAMY_DEVICE_LINK_OPTIONS} -T${OCRT_DEVICE_LINKER_SCRIPT} -Wl,-Map=${CMAKE_CURRENT_BINARY_DIR}/${TARGET_DEVICE}.map)
set_target_properties(${TARGET_DEVICE} PROPERTIES LINK_DEPENDS "${OCRT_DEVICE_LINKER_SOURCES}")

add_custom_command(TARGET ${TARGET_DEVICE} POST_BUILD
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        BYPRODUCTS ${CMAKE_CURRENT_BINARY_DIR}/${TARGET_DEVICE}.bin
        COMMAND ${CMAKE_OBJCOPY} ARGS ${CMAKE_OBJCOPY_OPTIONS} ${TARGET_DEVICE} ${TARGET_DEVICE}.bin
        COMMENT "Generating objcopy ${TARGET_DEVICE}.bin"
)

add_custom_command(TARGET ${TARGET_DEVICE} POST_BUILD
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        BYPRODUCTS ${CMAKE_CURRENT_BINARY_DIR}/${TARGET_DEVICE}.d
        COMMAND ${CMAKE_OBJDUMP} ARGS -D -d ${TARGET_DEVICE} > ${TARGET_DEVICE}.d
        COMMENT "Generating objdump ${TARGET_DEVICE}.d"
)

add_custom_command(TARGET ${TARGET_DEVICE} POST_BUILD
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        BYPRODUCTS ${TARGET_DEVICE}.dwarf
        COMMAND ${CMAKE_DWARFDUMP} ARGS ${TARGET_DEVICE} > ${TARGET_DEVICE}.dwarf
        COMMENT "Generating dwarfdump ${TARGET_DEVICE}.dwarf"
)

# Host Final Executable
add_executable(${TARGET_HOST}
        host/offload.c
#        ${CMAKE_CURRENT_BINARY_DIR}/${TARGET_DEVICE}.bin
)

add_dependencies(${TARGET_HOST} ${TARGET_DEVICE})
target_compile_definitions(${TARGET_HOST} PUBLIC OCCAMY)

target_include_directories(${TARGET_HOST} PUBLIC ${COMMON_INCLUDE_DIRS} ${PLATFORM_OCCAMY_INCLUDE_DIRS}#[[ ${SNRT_INCLUDE_DIRS}]] ${OCRT_HOST_INCLUDE_DIRS})
target_sources(${TARGET_HOST} PUBLIC ${COMMON_SOURCES} ${PLATFORM_OCCAMY_SOURCES} #[[${SNRT_SOURCES}]] ${OCRT_HOST_SOURCES})
target_compile_options(${TARGET_HOST} PUBLIC ${OCCAMY_DEVICE_COMPILE_OPTIONS}) # TODO: FIX HOST COMPILE OPTIONS

target_link_options(${TARGET_HOST} PUBLIC ${OCCAMY_HOST_LINK_OPTIONS} -T${OCRT_HOST_LINKER_SCRIPT} -Wl,-Map=${CMAKE_CURRENT_BINARY_DIR}/${TARGET_HOST}.map)
set_target_properties(${TARGET_HOST} PROPERTIES LINK_DEPENDS ${OCRT_HOST_LINKER_SCRIPT})

# Add device binary
target_compile_options(${TARGET_HOST} PUBLIC -DDEVICEBIN="${CMAKE_CURRENT_BINARY_DIR}/${TARGET_DEVICE}.bin")

add_custom_command(TARGET ${TARGET_HOST} POST_BUILD
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        BYPRODUCTS ${TARGET_HOST}.d
        COMMAND ${CMAKE_OBJDUMP} ARGS -D -d ${TARGET_HOST} > ${TARGET_HOST}.d
        COMMENT "Generating objdump ${TARGET_HOST}.d"
)

add_custom_command(TARGET ${TARGET_HOST} POST_BUILD
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        BYPRODUCTS ${TARGET_HOST}.dwarf
        COMMAND ${CMAKE_DWARFDUMP} ARGS ${TARGET_HOST} > ${TARGET_HOST}.dwarf
        COMMENT "Generating objdump ${TARGET_HOST}.dwarf"
)